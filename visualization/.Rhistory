dpi = 1000) # Качество - dots per inch
boxplot1 <- ggplot() +
geom_boxplot(data = insurance_cost,
aes(x = charges, y = sex)) +
theme_light() +
labs(x = 'charges', y = 'sex') +
theme( # Ниже идут настройки тем (их огромное количество, но мы меняем лишь две)
title = element_text(size = 12), # Задаем стандартный размер текста для любого элемента графика
axis.title.y = element_text(size=14) # Задаём размер для названия оси y отдельно +
)
boxplot2 <- ggplot() +
geom_boxplot(data = insurance_cost,
aes(x = charges, y = smoker)) +
theme_light() +
labs(x = 'charges', y = 'smokers') +
theme( # Ниже идут настройки тем (их огромное количество, но мы меняем лишь две)
title = element_text(size = 12), # Задаем стандартный размер текста для любого элемента графика
axis.title.y = element_text(size=14) # Задаём размер для названия оси y отдельно +
)
boxplot3 <- ggplot() +
geom_boxplot(data = insurance_cost,
aes(x = charges, y = region)) +
theme_light() +
labs(x = 'charges', y = 'region') +
theme( # Ниже идут настройки тем (их огромное количество, но мы меняем лишь две)
title = element_text(size = 12), # Задаем стандартный размер текста для любого элемента графика
axis.title.y = element_text(size=14) # Задаём размер для названия оси y отдельно +
)
#Сохранение картинок в png-формате
ggsave(
plot = boxplot1, # Какой объект хотим сохранить?
"results/charges_sex_bx.png", # Название файла + указываем формат (можно указать другие популярные форматы)
width = 8.5, # Ширина картинки
height = 9, # Высота картинки
dpi = 1000) # Качество - dots per inch
ggsave(
plot = boxplot2, # Какой объект хотим сохранить?
"results/charges_smokers_bx.png", # Название файла + указываем формат (можно указать другие популярные форматы)
width = 8.5, # Ширина картинки
height = 9, # Высота картинки
dpi = 1000) # Качество - dots per inch
ggsave(
plot = boxplot3, # Какой объект хотим сохранить?
"results/charges_region_bx.png", # Название файла + указываем формат (можно указать другие популярные форматы)
width = 8.5, # Ширина картинки
height = 9, # Высота картинки
dpi = 1000) # Качество - dots per inch
ggarrange(density, boxplot1, boxplot2, boxplot3, ncol = 1, nrow = 4)
combine_plot <- ggarrange(density, boxplot1, boxplot2, boxplot3, ncol = 1, nrow = 4)
combine_plot <- annotate_figure(combine_plot,
top = text_grob("Распределение ур-ней з/п в зависимости от различных факторов", face = "bold", size = 14))
combine_plot
combine_plot <- ggarrange(density, boxplot1, boxplot2, boxplot3, ncol = 1, nrow = 4)
combine_plot <- annotate_figure(combine_plot,
top = text_grob("Распределение ур-ней з/п в зависимости от различных факторов", face = "bold", size = 14))
ggsave(
plot = combine_plot, # Какой объект хотим сохранить?
"results/combine_plot.png", # Название файла + указываем формат (можно указать другие популярные форматы)
width = 8.5, # Ширина картинки
height = 9, # Высота картинки
dpi = 1000) # Качество - dots per inch
insurance_cost %>%
#filter(mass != 0 & triceps != 0) %>%
ggplot(aes(x = sex, y = charges, color = region, fill = region, group = region)) +
geom_point() +
facet_grid(. ~ region) +
theme_minimal()
faset <- insurance_cost %>%
#filter(mass != 0 & triceps != 0) %>%
ggplot(aes(x = sex, y = charges, color = region, fill = region, group = region)) +
geom_point() +
facet_grid(. ~ region) +
theme_minimal()
ggsave(
plot = faset, # Какой объект хотим сохранить?
"results/region_faset.png", # Название файла + указываем формат (можно указать другие популярные форматы)
width = 8.5, # Ширина картинки
height = 9, # Высота картинки
dpi = 1000) # Качество - dots per inch
insurance_cost %>%
#filter(mass != 0 & triceps != 0) %>%
ggplot(aes(x = age, y = charges, color = age)) +
geom_point(size=3) +
theme_minimal() +
ggtitle('Scatter plot отношения переменных возраста и зарплаты') +
theme(axis.text.x = element_text(size = 14))
insurance_cost %>%
#filter(mass != 0 & triceps != 0) %>%
ggplot(aes(x = age, y = charges, color = age)) +
geom_point(size=3) +
theme_minimal() +
ggtitle('Scatter plot отношения переменных возраста и зарплаты') +
theme(axis.text.x = element_text(size = 14)) +
geom_smooth(method=lm, # Выбираем модель. Стандартно - линейная модель
color="red", fullrange = T,
fill="#69b3a2",
se=TRUE) # Используем ли доверительные интервалы?
#9. Разбиваем предыдущий график по колонке smoker
insurance_cost %>%
#filter(mass != 0 & triceps != 0) %>%
ggplot(aes(
x = age,
y = charges,
color = smoker,
fill = smoker,
group = smoker)) +
geom_point(size=3) +
geom_smooth(method=lm, # Выбираем модель. Стандартно - линейная модель
color="red", fullrange = T,
fill="#69b3a2",
se=TRUE) + # Используем ли доверительные интервалы?
theme_minimal() +
ggtitle('Scatter plot отношения переменных возраста и зарплаты') +
theme(axis.text.x = element_text(size = 14))
scatter_plot1 <- insurance_cost %>%
#filter(mass != 0 & triceps != 0) %>%
ggplot(aes(x = age, y = charges, color = age)) +
geom_point(size=3) +
theme_minimal() +
ggtitle('Scatter plot отношения переменных возраста и зарплаты') +
theme(axis.text.x = element_text(size = 14))
scatter_plot2 <- insurance_cost %>%
#filter(mass != 0 & triceps != 0) %>%
ggplot(aes(x = age, y = charges, color = age)) +
geom_point(size=3) +
theme_minimal() +
ggtitle('Scatter plot отношения переменных возраста и зарплаты') +
theme(axis.text.x = element_text(size = 14)) +
geom_smooth(method=lm, # Выбираем модель. Стандартно - линейная модель
color="red", fullrange = T,
fill="#69b3a2",
se=TRUE) # Используем ли доверительные интервалы?
#9. Разбиваем предыдущий график по колонке smoker
scatter_plot3 <- insurance_cost %>%
#filter(mass != 0 & triceps != 0) %>%
ggplot(aes(
x = age,
y = charges,
color = smoker,
fill = smoker,
group = smoker)) +
geom_point(size=3) +
geom_smooth(method=lm, # Выбираем модель. Стандартно - линейная модель
color="red", fullrange = T,
fill="#69b3a2",
se=TRUE) + # Используем ли доверительные интервалы?
theme_minimal() +
ggtitle('Scatter plot отношения переменных возраста и зарплаты') +
theme(axis.text.x = element_text(size = 14))
#Сохранение картинок в png-формате
ggsave(
plot = scatter_plot1, # Какой объект хотим сохранить?
"results/charge_age_sp.png", # Название файла + указываем формат (можно указать другие популярные форматы)
width = 8.5, # Ширина картинки
height = 9, # Высота картинки
dpi = 1000) # Качество - dots per inch
ggsave(
plot = scatter_plot2, # Какой объект хотим сохранить?
"results/charge_age_trendLine_sp.png", # Название файла + указываем формат (можно указать другие популярные форматы)
width = 8.5, # Ширина картинки
height = 9, # Высота картинки
dpi = 1000) # Качество - dots per inch
ggsave(
plot = scatter_plot3, # Какой объект хотим сохранить?
"results/charge_age_smoker_sp.png", # Название файла + указываем формат (можно указать другие популярные форматы)
width = 8.5, # Ширина картинки
height = 9, # Высота картинки
dpi = 1000) # Качество - dots per inch
scatter_plot4 <- insurance_cost %>%
#filter(mass != 0 & triceps != 0) %>%
ggplot(aes(x = bmi, y = charges, color = bmi)) +
geom_point(size=3) +
theme_minimal() +
ggtitle('Scatter plot отношения переменных возраста и зарплаты') +
theme(axis.text.x = element_text(size = 14))
scatter_plot5 <- insurance_cost %>%
#filter(mass != 0 & triceps != 0) %>%
ggplot(aes(x = bmi, y = charges, color = bmi)) +
geom_point(size=3) +
theme_minimal() +
ggtitle('Scatter plot отношения переменных возраста и зарплаты') +
theme(axis.text.x = element_text(size = 14)) +
geom_smooth(method=lm, # Выбираем модель. Стандартно - линейная модель
color="red", fullrange = T,
fill="#69b3a2",
se=TRUE) # Используем ли доверительные интервалы?
scatter_plot6 <- insurance_cost %>%
#filter(mass != 0 & triceps != 0) %>%
ggplot(aes(
x = bmi,
y = charges,
color = smoker,
fill = smoker,
group = smoker)) +
geom_point(size=3) +
geom_smooth(method=lm, # Выбираем модель. Стандартно - линейная модель
color="red", fullrange = T,
fill="#69b3a2",
se=TRUE) + # Используем ли доверительные интервалы?
theme_minimal() +
ggtitle('Scatter plot отношения переменных возраста и зарплаты для курящих/некурящих') +
theme(axis.text.x = element_text(size = 14))
#Сохранение картинок в png-формате
ggsave(
plot = scatter_plot4, # Какой объект хотим сохранить?
"results/charge_bmi_sp.png", # Название файла + указываем формат (можно указать другие популярные форматы)
width = 8.5, # Ширина картинки
height = 9, # Высота картинки
dpi = 1000) # Качество - dots per inch
ggsave(
plot = scatter_plot5, # Какой объект хотим сохранить?
"results/charge_bmi_trendLine_sp.png", # Название файла + указываем формат (можно указать другие популярные форматы)
width = 8.5, # Ширина картинки
height = 9, # Высота картинки
dpi = 1000) # Качество - dots per inch
ggsave(
plot = scatter_plot6, # Какой объект хотим сохранить?
"results/charge_bmi_smoker_sp.png", # Название файла + указываем формат (можно указать другие популярные форматы)
width = 8.5, # Ширина картинки
height = 9, # Высота картинки
dpi = 1000) # Качество - dots per inch
sex_age_violin <- ggplot(insurance_cost) +
geom_violin(aes(x = sex, y = age, color = sex, fill = sex),
trim = FALSE) +
ggtitle('Поло-возрастной состав')
ggsave(
plot = sex_age_violin, # Какой объект хотим сохранить?
"results/sex_age_violin.png", # Название файла + указываем формат (можно указать другие популярные форматы)
width = 8.5, # Ширина картинки
height = 9, # Высота картинки
dpi = 1000) # Качество - dots per inch
hist(insurance_cost$age)
hist(insurance_cost$bmi)
hist(insurance_cost$children)
hist(insurance_cost$charges)
combine_plot <- ggarrange(density, boxplot1, boxplot2, boxplot3, ncol = 1, nrow = 4)
combine_plot <- annotate_figure(combine_plot,
top = text_grob("Распределение ур-ней з/п в зависимости от различных факторов", face = "bold", size = 14))
combine_plot
setwd("D:/Golubnikova/Working_directory/RStudio/Projects/BioStat_2022/visualization")
boxplot1 <- ggplot() +
geom_boxplot(data = insurance_cost,
aes(x = charges, y = sex)) +
theme_light() +
labs(x = 'charges', y = 'sex') +
theme( # Ниже идут настройки тем (их огромное количество, но мы меняем лишь две)
title = element_text(size = 12), # Задаем стандартный размер текста для любого элемента графика
axis.title.y = element_text(size=14) # Задаём размер для названия оси y отдельно +
)
boxplot2 <- ggplot() +
geom_boxplot(data = insurance_cost,
aes(x = charges, y = smoker)) +
theme_light() +
labs(x = 'charges', y = 'smokers') +
theme( # Ниже идут настройки тем (их огромное количество, но мы меняем лишь две)
title = element_text(size = 12), # Задаем стандартный размер текста для любого элемента графика
axis.title.y = element_text(size=14) # Задаём размер для названия оси y отдельно +
)
boxplot3 <- ggplot() +
geom_boxplot(data = insurance_cost,
aes(x = charges, y = region)) +
theme_light() +
labs(x = 'charges', y = 'region') +
theme( # Ниже идут настройки тем (их огромное количество, но мы меняем лишь две)
title = element_text(size = 12), # Задаем стандартный размер текста для любого элемента графика
axis.title.y = element_text(size=14) # Задаём размер для названия оси y отдельно +
)
boxplot1
boxplot2
boxplot3
# Найдём среднюю
charges_mean <- round(mean(insurance_cost$charges),1)
# Найдем медиану
charges_median <- round(median(insurance_cost$charges),1)
ggplot(data = insurance_cost,
aes(x = charges)) +
geom_histogram(bins = 50)
ggplot(data = insurance_cost,
aes(x = charges)) +
geom_density()
insurance_cost %>%
ggplot() +
geom_density(aes(x = charges)) +
ylab(expression(bold(density))) +
xlab(expression(bold(charges))) +
geom_vline(aes(xintercept = charges_mean), color = "red") + #Вертикальная линия
annotate("text",
x = charges_mean-90,
y = 0.000010,
color = "red",
label=paste0("Mean=", charges_mean)) +
geom_vline(aes(xintercept = charges_median), color = "green") + #Вертикальная линия
annotate("text",
x = charges_median+150,
y = 0.0000015,
color = "green",
label = paste0("Median=", charges_median)) +
theme_minimal()+
theme( # Ниже идут настройки тем (их огромное количество, но мы меняем лишь две)
title = element_text(size = 12), # Задаем стандартный размер текста для любого элемента графика
)
faset <- insurance_cost %>%
#filter(mass != 0 & triceps != 0) %>%
ggplot(aes(x = sex, y = charges, color = region, fill = region, group = region)) +
geom_point() +
facet_grid(. ~ region) +
theme_minimal()
faset
install.packages("skimr")
library(skimr)
skim(insurance_cost)
install.packages("skimr")
library(skimr)
skim(insurance_cost)
install.packages("skimr")
insurance_cost <- read.csv('data/insurance_cost.csv', stringsAsFactors = T)
# Можно загрузить точно такие же данные, но в формате Excel
#pima1 <- openxlsx::read.xlsx('pima.xlsx')
head(insurance_cost)
summary(insurance_cost$age)
hist(insurance_cost$age)
hist(insurance_cost$bmi)
hist(insurance_cost$children)
hist(insurance_cost$charges)
insurance_cost_new <- insurance_cost %>%
age_group = case_when(
age < 35 ~ "21-34",
age >= 35 & age < 50 ~ "35-49",
age >= 50 ~ "50+")
insurance_cost <- insurance_cost %>%
age_group = case_when(
age < 35 ~ "21-34",
age >= 35 & age < 50 ~ "35-49",
age >= 50 ~ "50+")
insurance_cost <- read.csv('data/insurance_cost.csv', stringsAsFactors = T)
# Можно загрузить точно такие же данные, но в формате Excel
#pima1 <- openxlsx::read.xlsx('pima.xlsx')
head(insurance_cost)
insurance_cost_new <- insurance_cost %>%
age_group = case_when(
insurance_cost$age < 35 ~ "21-34",
insurance_cost$age >= 35 & age < 50 ~ "35-49",
insurance_cost$age >= 50 ~ "50+")
knitr::opts_chunk$set(echo = TRUE)
pima <- pima %>%
mutate(
diabetes_ch = as.character(diabetes),
age_group = case_when(
age < 35 ~ "21-34",
age >= 35 & age < 50 ~ "35-49",
age >= 50 ~ "50+"
))
pima <- read.csv('pima.csv', stringsAsFactors = T)
# Можно загрузить точно такие же данные, но в формате Excel
pima <- openxlsx::read.xlsx('pima.xlsx')
head(pima)
str(pima)
pima <- pima %>%
mutate(
diabetes_ch = as.character(diabetes),
age_group = case_when(
age < 35 ~ "21-34",
age >= 35 & age < 50 ~ "35-49",
age >= 50 ~ "50+"
))
summary(pima)
table(pima$age_group)
pima <- pima %>%
mutate(
diabetes_ch = as.character(diabetes),
age_group = case_when(
age < 35 ~ "21-34",
age >= 35 & age < 50 ~ "35-49",
age >= 50 ~ "50+"
))
summary(pima)
table(pima$age_group)
insurance_cost_new <- insurance_cost %>%
mutate(age_group = case_when(
insurance_cost$age < 35 ~ "21-34",
insurance_cost$age >= 35 & age < 50 ~ "35-49",
insurance_cost$age >= 50 ~ "50+"))
summary(insurance_cost_new)
table(insurance_cost_new$age_group)
ggplot() +
geom_density(data = insurance_cost_new,
aes(x = glucose, fill = age_group),
alpha = 0.5 # Показатель альфа указывает насколько прозрачным должно быть отображение фигур. Измеряется от 0 до 1.
) +
theme_minimal()
ggplot() +
geom_density(data = insurance_cost_new,
aes(x = charges, fill = age_group),
alpha = 0.5 # Показатель альфа указывает насколько прозрачным должно быть отображение фигур. Измеряется от 0 до 1.
) +
theme_minimal()
ggplot() +
geom_histogram(data = insurance_cost_new[insurance_cost_new$charges != 0,],
aes(x = charges, fill = age_group), alpha = 0.5) +
theme_minimal()
ggplot() +
geom_histogram(data = insurance_cost_new,
aes(x = charges, fill = age_group), alpha = 0.5) +
theme_minimal()
summary(insurance_cost_new)
table(insurance_cost_new$age_group)
atr(insurance_cost$age)
str(insurance_cost$age)
table(insurance_cost$age)
insurance_cost_new <- insurance_cost %>%
mutate(age_group = case_when(
insurance_cost$age < 30 ~ "18-29",
insurance_cost$age >= 30 & age < 45 ~ "30-44",
insurance_cost$age >= 45 ~ "45+"))
summary(insurance_cost_new)
table(insurance_cost_new$age_group)
ggplot() +
geom_density(data = insurance_cost_new,
aes(x = charges, fill = age_group),
alpha = 0.5 # Показатель альфа указывает насколько прозрачным должно быть отображение фигур. Измеряется от 0 до 1.
) +
theme_minimal()
ggplot() +
geom_histogram(data = insurance_cost_new,
aes(x = charges, fill = age_group), alpha = 0.5) +
theme_minimal()
ggplot(data = pima,
aes(x = glucose)) +
geom_histogram()
ggplot(data = pima,
aes(x = glucose)) +
geom_density()
ggplot() +
geom_density(data = insurance_cost_new,
aes(x = charges, fill = age_group),
alpha = 0.5 # Показатель альфа указывает насколько прозрачным должно быть отображение фигур. Измеряется от 0 до 1.
) +
theme_minimal()
scatter_plot4 <- insurance_cost %>%
#filter(mass != 0 & triceps != 0) %>%
ggplot(aes(x = bmi, y = charges, color = bmi)) +
geom_point(size=3) +
theme_minimal() +
ggtitle('Scatter plot отношения переменных возраста и страховых выплат') +
theme(axis.text.x = element_text(size = 14))
scatter_plot5 <- insurance_cost %>%
#filter(mass != 0 & triceps != 0) %>%
ggplot(aes(x = bmi, y = charges, color = bmi)) +
geom_point(size=3) +
theme_minimal() +
ggtitle('Scatter plot отношения переменных возраста и страховых выплат') +
theme(axis.text.x = element_text(size = 14)) +
geom_smooth(method=lm, # Выбираем модель. Стандартно - линейная модель
color="red", fullrange = T,
fill="#69b3a2",
se=TRUE) # Используем ли доверительные интервалы?
scatter_plot6 <- insurance_cost %>%
#filter(mass != 0 & triceps != 0) %>%
ggplot(aes(
x = bmi,
y = charges,
color = smoker,
fill = smoker,
group = smoker)) +
geom_point(size=3) +
geom_smooth(method=lm, # Выбираем модель. Стандартно - линейная модель
color="red", fullrange = T,
fill="#69b3a2",
se=TRUE) + # Используем ли доверительные интервалы?
theme_minimal() +
ggtitle('Scatter plot отношения перем. возраста и страх.выплат для курящих/некурящих') +
theme(axis.text.x = element_text(size = 14))
scatter_plot4
scatter_plot5
scatter_plot6
scatter_plot4 <- insurance_cost %>%
#filter(mass != 0 & triceps != 0) %>%
ggplot(aes(x = bmi, y = charges, color = bmi)) +
geom_point(size=3) +
theme_minimal() +
ggtitle('Отношение переменных возраста и страховых выплат') +
theme(axis.text.x = element_text(size = 14))
scatter_plot5 <- insurance_cost %>%
#filter(mass != 0 & triceps != 0) %>%
ggplot(aes(x = bmi, y = charges, color = bmi)) +
geom_point(size=3) +
theme_minimal() +
ggtitle('Отношение переменных возраста и страховых выплат') +
theme(axis.text.x = element_text(size = 14)) +
geom_smooth(method=lm, # Выбираем модель. Стандартно - линейная модель
color="red", fullrange = T,
fill="#69b3a2",
se=TRUE) # Используем ли доверительные интервалы?
scatter_plot6 <- insurance_cost %>%
#filter(mass != 0 & triceps != 0) %>%
ggplot(aes(
x = bmi,
y = charges,
color = smoker,
fill = smoker,
group = smoker)) +
geom_point(size=3) +
geom_smooth(method=lm, # Выбираем модель. Стандартно - линейная модель
color="red", fullrange = T,
fill="#69b3a2",
se=TRUE) + # Используем ли доверительные интервалы?
theme_minimal() +
ggtitle('Отношение перем. возраста и страх.выплат для курящих/некурящих') +
theme(axis.text.x = element_text(size = 14))
scatter_plot4
scatter_plot5
scatter_plot6
