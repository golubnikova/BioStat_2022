corr.calc <- function(x){
#colnames(x) <- c('v1', 'v2')
fit  <- cor.test(x = x[ ,1], y = x[,2])
return(c(fit$cor,fit$p.value))
}
corr.calc(mtcars[, c(1,5)])
corr.calc(mtcars[, c(1,5)])
corr.calc <- function(x){
#colnames(x) <- c('v1', 'v2')
fit  <- cor.test(x = x[ ,1], y = x[,2])
return(fit$cor,fit$p.value)
}
corr.calc(mtcars[, c(1,5)])
View(mtcars)
cor.test(x = mtcars$mpg, y = mtcars$hp)
fit  <- cor.test(x = mtcars$mpg, y = mtcars$hp)
cor.test(x = mtcars$mpg, y = mtcars$hp)
fit  <- cor.test(x = mtcars$mpg, y = mtcars$hp)
fit$cor
fit$p.value
corr.calc <- function(x){
#colnames(x) <- c('v1', 'v2')
fit  <- cor.test(x = x[ ,1], y = x[,2])
result <- c(fit$statustic,fit$p.value)
return(result)
}
corr.calc(mtcars[, c(1,5)])
corr.calc <- function(x){
#colnames(x) <- c('v1', 'v2')
fit  <- cor.test(x = x[ ,1], y = x[,2])
result <- c(fit$statistic,fit$p.value)
return(result)
}
corr.calc(mtcars[, c(1,5)])
str(fit)
log(2, base = 2)
log(3, base = 2)
log(4, base = 2)
log(8, base = 2)
?cummean
'??cummean'
??'cummean'
??'cummean'
??'cummean'
install.packages("dplyr")                        # Install and load dplyr
library("dplyr")
?cummean
?cummean
rate <- 1/100 # Параметр экспоненциального распределения (1/среднее значение)
n <- 1000 # Количество добровольцев
titer <- rexp(n, rate)
hist(titer)
log_titer <- log2(titer)
hist(log_titer)
### Прирост значений ###
a <- 10 # Нижняя граница биохимического маркера
b <- 20 # Верхняя граница биохимического маркера
n <- 1000 # Количество добровольцев
sample_1 <- runif(n, a, b)
hist(sample_1)
sample_2 <- runif(n, a+5, b+5)
hist(sample_2)
delta_sample <- sample_2 - sample_1
hist(delta_sample)
### Сумма случайных величин ###
a <- 100 # Нижняя граница урожая
b <- 200 # Верхняя граница урожая
n <- 1000 # Количество полей
sample_1 <- runif(n, a, b) # Урожай за первый год наблюдения
hist(sample_1)
sample_2 <- runif(n, a, b) # Урожай за второй год наблюдения
hist(sample_1 + sample_2)
sample_3 <- runif(n, a, b) # Урожай за третий год наблюдения
hist(sample_1 + sample_2 + sample_3)
sample_4 <- runif(n, a, b) # Урожай за четвертый год наблюдения
hist(sample_1 + sample_2 + sample_3 + sample_4)
results_from_centers <- sapply(1:m, function(x){
my_group_Hg_upd <- sample(values, n, replace = TRUE) # Результаты n добровольцев
sample_mean <- mean(my_group_Hg_upd)
})
hist(results_from_centers,ylim = c(0,sqrt(n)/sqrt(2*pi*standard_deviation)),freq = FALSE)
x <- seq(true_mean-3*standard_deviation,true_mean+3*standard_deviation,0.1)
y <- dnorm(x,true_mean,standard_deviation/sqrt(n))
lines(x,y,col = "red")
library(ggplot2)
# Прирост гемоглобина (центральная предельная теорема)
values <- 0:16 # Значения, которые может принимать случайная величина
max_val <- max(values) # Максимальное значение случайной величины
Pr <- 1/length(values)  # Распределение в генеральной совокупности
df <- data.frame(values, Pr)
ggplot(df, aes(x=values, y=Pr)) +
geom_point() +
geom_segment( aes(x=values, xend=values, y=0, yend=Pr)) +
scale_x_continuous(breaks = values) +
theme_bw()
true_mean <- sum(values*Pr) # Истинное среднее (математическое ожидание)
print(true_mean)
variance <- sum((values-true_mean)^2*Pr) # Дисперсия
print(variance)
standard_deviation <- sqrt(variance)
print(standard_deviation)
n <- 30 # Количество добровольцев (вместо лет наблюдения за полями)
m <- 1000 # Количество исследовательских центров (вместо количества полей)
# Что там намеряли в центрах
results_from_centers <- sapply(1:m, function(x){
my_group_Hg_upd <- sample(values, n, replace = TRUE) # Результаты n добровольцев
sample_mean <- mean(my_group_Hg_upd)
})
hist(results_from_centers,ylim = c(0,sqrt(n)/sqrt(2*pi*standard_deviation)),freq = FALSE)
x <- seq(true_mean-3*standard_deviation,true_mean+3*standard_deviation,0.1)
y <- dnorm(x,true_mean,standard_deviation/sqrt(n))
lines(x,y,col = "red")
n <- 10 # Количество добровольцев (вместо лет наблюдения за полями)
m <- 1000 # Количество исследовательских центров (вместо количества полей)
# Что там намеряли в центрах
results_from_centers <- sapply(1:m, function(x){
my_group_Hg_upd <- sample(values, n, replace = TRUE) # Результаты n добровольцев
sample_mean <- mean(my_group_Hg_upd)
})
hist(results_from_centers,ylim = c(0,sqrt(n)/sqrt(2*pi*standard_deviation)),freq = FALSE)
x <- seq(true_mean-3*standard_deviation,true_mean+3*standard_deviation,0.1)
y <- dnorm(x,true_mean,standard_deviation/sqrt(n))
lines(x,y,col = "red")
n <- 4 # Количество добровольцев (вместо лет наблюдения за полями)
m <- 1000 # Количество исследовательских центров (вместо количества полей)
# Что там намеряли в центрах
results_from_centers <- sapply(1:m, function(x){
my_group_Hg_upd <- sample(values, n, replace = TRUE) # Результаты n добровольцев
sample_mean <- mean(my_group_Hg_upd)
})
hist(results_from_centers,ylim = c(0,sqrt(n)/sqrt(2*pi*standard_deviation)),freq = FALSE)
x <- seq(true_mean-3*standard_deviation,true_mean+3*standard_deviation,0.1)
y <- dnorm(x,true_mean,standard_deviation/sqrt(n))
lines(x,y,col = "red")
n <- 4 # Количество добровольцев (вместо лет наблюдения за полями)
m <- 1000 # Количество исследовательских центров (вместо количества полей)
# Что там намеряли в центрах
results_from_centers <- sapply(1:m, function(x){
my_group_Hg_upd <- sample(values, n, replace = TRUE) # Результаты n добровольцев
sample_mean <- mean(my_group_Hg_upd)
})
hist(results_from_centers,ylim = c(0,sqrt(n)/sqrt(2*pi*standard_deviation)),freq = FALSE)
x <- seq(true_mean-3*standard_deviation,true_mean+3*standard_deviation,0.1)
y <- dnorm(x,true_mean,standard_deviation/sqrt(n))
lines(x,y,col = "red")
n <- 4 # Количество добровольцев (вместо лет наблюдения за полями)
m <- 1000 # Количество исследовательских центров (вместо количества полей)
# Что там намеряли в центрах
results_from_centers <- sapply(1:m, function(x){
my_group_Hg_upd <- sample(values, n, replace = TRUE) # Результаты n добровольцев
sample_mean <- mean(my_group_Hg_upd)
})
hist(results_from_centers,ylim = c(0,sqrt(n)/sqrt(2*pi*standard_deviation)),freq = FALSE)
x <- seq(true_mean-3*standard_deviation,true_mean+3*standard_deviation,0.1)
y <- dnorm(x,true_mean,standard_deviation/sqrt(n))
lines(x,y,col = "red")
n <- 4 # Количество добровольцев (вместо лет наблюдения за полями)
m <- 1000 # Количество исследовательских центров (вместо количества полей)
# Что там намеряли в центрах
results_from_centers <- sapply(1:m, function(x){
my_group_Hg_upd <- sample(values, n, replace = TRUE) # Результаты n добровольцев
sample_mean <- mean(my_group_Hg_upd)
})
hist(results_from_centers,ylim = c(0,sqrt(n)/sqrt(2*pi*standard_deviation)),freq = FALSE)
x <- seq(true_mean-3*standard_deviation,true_mean+3*standard_deviation,0.1)
y <- dnorm(x,true_mean,standard_deviation/sqrt(n))
lines(x,y,col = "red")
n <- 4 # Количество добровольцев (вместо лет наблюдения за полями)
m <- 1000 # Количество исследовательских центров (вместо количества полей)
# Что там намеряли в центрах
results_from_centers <- sapply(1:m, function(x){
my_group_Hg_upd <- sample(values, n, replace = TRUE) # Результаты n добровольцев
sample_mean <- mean(my_group_Hg_upd)
})
hist(results_from_centers,ylim = c(0,sqrt(n)/sqrt(2*pi*standard_deviation)),freq = FALSE)
x <- seq(true_mean-3*standard_deviation,true_mean+3*standard_deviation,0.1)
y <- dnorm(x,true_mean,standard_deviation/sqrt(n))
lines(x,y,col = "red")
n <- 4 # Количество добровольцев (вместо лет наблюдения за полями)
m <- 1000 # Количество исследовательских центров (вместо количества полей)
# Что там намеряли в центрах
results_from_centers <- sapply(1:m, function(x){
my_group_Hg_upd <- sample(values, n, replace = TRUE) # Результаты n добровольцев
sample_mean <- mean(my_group_Hg_upd)
})
hist(results_from_centers,ylim = c(0,sqrt(n)/sqrt(2*pi*standard_deviation)),freq = FALSE)
x <- seq(true_mean-3*standard_deviation,true_mean+3*standard_deviation,0.1)
y <- dnorm(x,true_mean,standard_deviation/sqrt(n))
lines(x,y,col = "red")
n <- 10 # Количество добровольцев (вместо лет наблюдения за полями)
m <- 1000 # Количество исследовательских центров (вместо количества полей)
# Что там намеряли в центрах
results_from_centers <- sapply(1:m, function(x){
my_group_Hg_upd <- sample(values, n, replace = TRUE) # Результаты n добровольцев
sample_mean <- mean(my_group_Hg_upd)
})
hist(results_from_centers,ylim = c(0,sqrt(n)/sqrt(2*pi*standard_deviation)),freq = FALSE)
x <- seq(true_mean-3*standard_deviation,true_mean+3*standard_deviation,0.1)
y <- dnorm(x,true_mean,standard_deviation/sqrt(n))
lines(x,y,col = "red")
n <- 10 # Количество добровольцев (вместо лет наблюдения за полями)
m <- 1000 # Количество исследовательских центров (вместо количества полей)
# Что там намеряли в центрах
results_from_centers <- sapply(1:m, function(x){
my_group_Hg_upd <- sample(values, n, replace = TRUE) # Результаты n добровольцев
sample_mean <- mean(my_group_Hg_upd)
})
hist(results_from_centers,ylim = c(0,sqrt(n)/sqrt(2*pi*standard_deviation)),freq = FALSE)
x <- seq(true_mean-3*standard_deviation,true_mean+3*standard_deviation,0.1)
y <- dnorm(x,true_mean,standard_deviation/sqrt(n))
lines(x,y,col = "red")
n <- 10 # Количество добровольцев (вместо лет наблюдения за полями)
m <- 1000 # Количество исследовательских центров (вместо количества полей)
# Что там намеряли в центрах
results_from_centers <- sapply(1:m, function(x){
my_group_Hg_upd <- sample(values, n, replace = TRUE) # Результаты n добровольцев
sample_mean <- mean(my_group_Hg_upd)
})
hist(results_from_centers,ylim = c(0,sqrt(n)/sqrt(2*pi*standard_deviation)),freq = FALSE)
x <- seq(true_mean-3*standard_deviation,true_mean+3*standard_deviation,0.1)
y <- dnorm(x,true_mean,standard_deviation/sqrt(n))
lines(x,y,col = "red")
library(ggplot2)
# Количество дней до выздоровления (центральная предельная теорема)
avg_days <- 7 # Cредняя продолжительность болезни (в ГС)
values <- 1:(3*avg_days)
Pr <- dgeom(values,1/(avg_days+1))  # Распределение в генеральной совокупности
df <- data.frame(values, Pr)
ggplot(df, aes(x=values, y=Pr)) +
geom_point() +
geom_segment( aes(x=values, xend=values, y=0, yend=Pr)) +
scale_x_continuous(breaks = values) +
theme_bw()
true_mean <- avg_days # Истинное среднее (математическое ожидание)
variance <- avg_days^2 # Дисперсия
print(variance)
standard_deviation <- sqrt(variance)
print(standard_deviation)
n <- 150 # Количество добровольцев
m <- 1000 # Количество исследовательских центров
normalized_errors <- sapply(1:m, function(x){
my_group_disease_duration <- rgeom(n, 1/(avg_days+1)) # Результаты n добровольцев
sample_mean <- mean(my_group_disease_duration)
sample_sd <- sd(my_group_disease_duration)
error <- sqrt(n)*(sample_mean - true_mean)/sample_sd
})
hist(normalized_errors,ylim = c(0,1/sqrt(2*pi)),freq = FALSE)
x <- seq(-3,+3,0.1)
y <- dnorm(x)
lines(x,y,col = "red")
n <- 15 # Количество добровольцев
m <- 1000 # Количество исследовательских центров
normalized_errors <- sapply(1:m, function(x){
my_group_disease_duration <- rgeom(n, 1/(avg_days+1)) # Результаты n добровольцев
sample_mean <- mean(my_group_disease_duration)
sample_sd <- sd(my_group_disease_duration)
error <- sqrt(n)*(sample_mean - true_mean)/sample_sd
})
hist(normalized_errors,ylim = c(0,1/sqrt(2*pi)),freq = FALSE)
x <- seq(-3,+3,0.1)
y <- dnorm(x)
lines(x,y,col = "red")
n <- 30 # Количество добровольцев
m <- 1000 # Количество исследовательских центров
normalized_errors <- sapply(1:m, function(x){
my_group_feature <- rcauchy(x, location = true_feature_parameter) # Результаты n добровольцев
sample_mean <- mean(my_group_feature)
sample_sd <- sd(my_group_feature)
normlized_error <- sqrt(n)*(sample_mean - true_feature_parameter)/sample_sd
})
true_feature_parameter <- 7
values <- seq(0,2*true_feature_parameter,0.1)
Pr <- dcauchy(values, location = true_feature_parameter)  # Распределение в генеральной совокупности
df <- data.frame(values, Pr)
ggplot(df, aes(x=values, y=Pr)) +
geom_line() +
scale_x_continuous(limits = c(0,2*true_feature_parameter)) +
theme_bw()
n <- 30 # Количество добровольцев
m <- 1000 # Количество исследовательских центров
normalized_errors <- sapply(1:m, function(x){
my_group_feature <- rcauchy(x, location = true_feature_parameter) # Результаты n добровольцев
sample_mean <- mean(my_group_feature)
sample_sd <- sd(my_group_feature)
normlized_error <- sqrt(n)*(sample_mean - true_feature_parameter)/sample_sd
})
hist(normalized_errors,freq = FALSE)
x <- seq(-3,+3,0.1)
y <- dnorm(x)
lines(x,y,col = "red")
setwd("~/Биостатистика/REPOs/BioStat_2022/visualization")
knitr::opts_chunk$set(echo = TRUE)
# install.packages("plotly")
# или
# devtools::install_github("ropensci/plotly")
library(plotly)
skimr::skim(pima)
# Если у вас не установлены какие-то из библиотек ниже, то установить их можно следующей командой. Эти библиотеки пригодятся нам во время занятия, но подгружать в library() мы их будем тогда, когда будем затрагивать соответствующую тему.
# install.packages(c('ggpubr', 'plotly', 'corrplot', 'corrr', 'ggfortify', 'pheatmap', 'factoextra', 'FactoMineR', 'ggbiplot'))
# Загрузим библиотеки
library(dplyr)
library(ggplot2)
library(ggpubr)
pima <- read.csv('pima.csv')
# Сделаем более детализированную переменную возрастных групп
pima <- pima %>%
mutate(
diabetes_ch = as.character(diabetes),
age_group = case_when(
age < 31 ~ "21-30",
age >= 31 & age < 41 ~ "31-40",
age >= 41 & age < 51 ~ "41-50",
age >= 51 & age < 61 ~ "51-60",
age >= 61 ~ "60+"
))
table(pima$age_group)
# install.packages("plotly")
# или
# devtools::install_github("ropensci/plotly")
library(plotly)
skimr::skim(pima)
plot_ly(
pima[pima$insulin != 0,],
x = ~ insulin,
color = ~ age_group,
type = "box"
)
plot_ly(data = pima[(pima$insulin != 0) & (pima$glucose != 0),],
x = ~ insulin,
y = ~ glucose)
plot_ly(
data = pima[(pima$insulin != 0) & (pima$glucose != 0),],
x = ~ insulin,
y = ~ glucose,
marker = list(
size = 10,
# размер
color = 'rgba(255, 182, 193, .9)',
# Цвет внутри
line = list(color = 'rgba(152, 0, 0, .8)',  # Цвет окружности
width = 2)
)
)   %>%
layout(
title = 'Отношение уровня глюкозы и инсулина в данных PIMA',
yaxis = list(title = 'Уровень глюкозы',
zeroline = FALSE),  # Уберём выделения нулевых осей по y
xaxis = list(title = 'Уровень инсулина',
zeroline = FALSE)) # Уберём выделения нулевых осей по y
plot_ly(
data = pima[(pima$insulin != 0) & (pima$glucose != 0),],
x = ~ insulin,
y = ~ glucose,
color = ~diabetes_ch
)   %>%
layout(
title = 'Отношение уровня глюкозы и инсулина в данных PIMA',
yaxis = list(title = 'Уровень глюкозы',
zeroline = FALSE),  # Уберём выделения нулевых осей по y
xaxis = list(title = 'Уровень инсулина',
zeroline = FALSE)) # Уберём выделения нулевых осей по y
pal <- c("red", "blue", "green")
pal <- setNames(pal, levels(pima$age_group))
plot_ly(data = pima[(pima$insulin != 0) & (pima$glucose != 0),],
x = ~ insulin,
y = ~ glucose,
color = ~age_group,
colors = pal)
plot_ly(
data = pima[(pima$insulin != 0) & (pima$glucose != 0),],
x = ~insulin,
y = ~glucose,
color = ~diabetes_ch,
size = ~mass,
text = ~mass,
hoverinfo = "text")
# Со стандартной палеткой
plot_ly(data = pima[(pima$insulin != 0) & (pima$glucose != 0),],
x = ~ insulin,
y = ~ glucose,
color = ~age_group)
# С изменённой палеткой
plot_ly(data = pima[(pima$insulin != 0) & (pima$glucose != 0),],
x = ~ insulin,
y = ~ glucose,
color = ~age_group,
colors = "Set1")
plot_ly(
data = pima[(pima$insulin != 0) & (pima$glucose != 0) & (pima$mass != 0),],
x = ~ insulin,
y = ~ glucose,
z = ~mass,
color = ~diabetes_ch
)   %>%
layout(
title = 'Отношение уровня глюкозы и инсулина в данных PIMA',
yaxis = list(title = 'Уровень глюкозы',
zeroline = FALSE),  # Уберём выделения нулевых осей по y
xaxis = list(title = 'Уровень инсулина',
zeroline = FALSE)) # Уберём выделения нулевых осей по y
plot_ly(
data = pima[(pima$insulin != 0) & (pima$glucose != 0),],
x = ~ age,
y = ~ mass,
color = ~pressure
)
plot_ly(
data = pima[(pima$age != 0) & (pima$mass != 0) & (pima$pressure != 0),],
x = ~ age,
y = ~ mass,
color = ~pressure
)
knitr::opts_chunk$set(echo = TRUE)
insurance_cost <- read.csv('data/insurance_cost.csv', stringsAsFactors = T)
# Можно загрузить точно такие же данные, но в формате Excel
#pima1 <- openxlsx::read.xlsx('pima.xlsx')
head(insurance_cost)
boxplot1 <- ggplot() +
geom_boxplot(data = insurance_cost,
aes(x = charges, y = sex)) +
theme_light() +
labs(x = 'charges', y = 'sex') +
theme( # Ниже идут настройки тем (их огромное количество, но мы меняем лишь две)
title = element_text(size = 12), # Задаем стандартный размер текста для любого элемента графика
axis.title.y = element_text(size=14) # Задаём размер для названия оси y отдельно +
)
ggplotly(boxplot1)
ggplot() +
geom_boxplot(data = insurance_cost,
aes(x = charges, y = sex)) +
theme_light() +
labs(x = 'charges', y = 'sex') +
theme( # Ниже идут настройки тем (их огромное количество, но мы меняем лишь две)
title = element_text(size = 12), # Задаем стандартный размер текста для любого элемента графика
axis.title.y = element_text(size=14) # Задаём размер для названия оси y отдельно +
)
ggplotly(boxplot1)
insurance_cost %>%
#filter(mass != 0 & triceps != 0) %>%
ggplot(aes(x = age, y = charges, color = age)) +
geom_point(size=3) +
theme_minimal() +
ggtitle('Scatter plot отношения переменных возраста и зарплаты') +
theme(axis.text.x = element_text(size = 14))
insurance_cost %>%
#filter(mass != 0 & triceps != 0) %>%
ggplot(aes(x = age, y = charges, color = age)) +
geom_point(size=3) +
theme_minimal() +
ggtitle('Scatter plot отношения переменных возраста и зарплаты') +
theme(axis.text.x = element_text(size = 14)) +
geom_smooth(method=lm, # Выбираем модель. Стандартно - линейная модель
color="red", fullrange = T,
fill="#69b3a2",
se=TRUE) # Используем ли доверительные интервалы?
#9. Разбиваем предыдущий график по колонке smoker
insurance_cost %>%
#filter(mass != 0 & triceps != 0) %>%
ggplot(aes(
x = age,
y = charges,
color = smoker,
fill = smoker,
group = smoker)) +
geom_point(size=3) +
geom_smooth(method=lm, # Выбираем модель. Стандартно - линейная модель
color="red", fullrange = T,
fill="#69b3a2",
se=TRUE) + # Используем ли доверительные интервалы?
theme_minimal() +
ggtitle('Scatter plot отношения переменных возраста и зарплаты') +
theme(axis.text.x = element_text(size = 14))
plot1 <- insurance_cost %>%
#filter(mass != 0 & triceps != 0) %>%
ggplot(aes(
x = age,
y = charges,
color = smoker,
fill = smoker,
group = smoker)) +
geom_point(size=3) +
geom_smooth(method=lm, # Выбираем модель. Стандартно - линейная модель
color="red", fullrange = T,
fill="#69b3a2",
se=TRUE) + # Используем ли доверительные интервалы?
theme_minimal() +
ggtitle('Scatter plot отношения переменных возраста и зарплаты') +
theme(axis.text.x = element_text(size = 14))
ggplotly(plot1)
# Для более "чистого" результата, избавляемся от ошибочных значений
pima_clear <- pima %>%
filter(glucose != 0 & pressure != 0 & triceps != 0 & insulin != 0 & mass != 0 & age != 0 ) %>%
select(is.integer | is.numeric) # Обратите внимание, в dplyr можно задавать выборку колонок через команды определения формата данных
head(pima_clear)
# Получаем непосредственно матрицу
pima_cor <- cor(pima_clear)
pima_cor
corrplot(pima_cor, method = 'number')
library(factoextra)
pima_clear_dist <- dist(pima_clear_scaled, method = "euclidean")
pima_clear_dist <- dist(pima_clear_scaled, method = "euclidean")
library(ggfortify)
autoplot(pima_clear_scaled)
pima_clear_scaled <- scale(pima_clear)
head(pima_clear_scaled)
library(ggfortify)
autoplot(pima_clear_scaled)
pima_clear_dist <- dist(pima_clear_scaled, method = "euclidean")
as.matrix(pima_clear_dist)[1:6,1:6]
pheatmap(pima_clear_scaled)
library(pheatmap)
pheatmap(pima_clear_scaled)
